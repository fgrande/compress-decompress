name: Example Workflow using Compress Decompress

on:
  workflow_dispatch:
    inputs:
      run:
        description: 'workflow run'
        required: true
        default: 'true'
  workflow_run:
    workflows: ["Create release"]
    types:
      - completed

permissions:
  contents: read

jobs:
  test-compression-formats:
    name: Test Compression Formats
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [zip, tar, tgz, tbz2]
        include_root: [true, false]
        source: [test2]
        dest_config:
          - type: default
            dest: ''
            destfilename: ''
          - type: custom
            dest: 'custom_output'
            destfilename: 'custom_archive'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files and Directories
        run: |
          mkdir -p test2 test3 custom_output
          echo "Test content for test2" > test2/test2.txt
          
          echo "Created directories and files:"
          ls -la test2/
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            ls -la ${{ matrix.dest_config.dest }}/
          fi

      - name: Test Compression
        id: compress
        uses: somaz94/compress-decompress@v1
        with:
          command: 'compress'
          source: './${{ matrix.source }}'
          format: ${{ matrix.format }}
          includeRoot: ${{ matrix.include_root }}
          dest: ${{ matrix.dest_config.dest }}
          destfilename: ${{ matrix.dest_config.destfilename }}
          verbose: 'true'

      - name: List Workspace Contents
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Source directory contents:"
          ls -la ./${{ matrix.source }}

      # Set the correct source path based on configuration
      - name: Set Source Path
        id: set-path
        run: |
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            echo "source_path=${{ matrix.dest_config.dest }}/${{ matrix.dest_config.destfilename }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.include_root }}" = "true" ]; then
              echo "source_path=./${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            else
              echo "source_path=./${{ matrix.source }}/${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Compressed Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-${{ matrix.format }}-${{ matrix.source }}-root-${{ matrix.include_root }}-dest-${{ matrix.dest_config.type }}
          path: ${{ steps.set-path.outputs.source_path }}
          if-no-files-found: error

      - name: Test Decompression
        uses: somaz94/compress-decompress@v1
        with:
          command: 'decompress'
          source: ${{ steps.set-path.outputs.source_path }}
          format: ${{ matrix.format }}
          dest: './unpacked-${{ matrix.format }}-${{ matrix.source }}'
          verbose: 'false'

      - name: Verify Contents
        run: |
          echo "Verifying ${{ matrix.format }} format with includeRoot: ${{ matrix.include_root }}, dest: ${{ matrix.dest_config.type }}"
          echo "Listing unpacked directory contents:"
          ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
          
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo "Contents with root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}/${{ matrix.source }}.txt
          else
            echo "Contents without root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}.txt
          fi

      - name: Print Compression Output
        run: |
          echo "Compression output for ${{ matrix.format }} (includeRoot: ${{ matrix.include_root }}): ${{ steps.compress.outputs.file_path }}"

  test-error-handling:
    name: Test Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Case 1: Should fail (fail_on_error: true)
      - name: Test Non-existent Source (with fail_on_error)
        id: test_fail
        uses: somaz94/compress-decompress@v1
        continue-on-error: true  # Allow the workflow to continue even if this step fails
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify Expected Failure
        run: |
          if [ "${{ steps.test_fail.outcome }}" != "failure" ]; then
            echo "Expected failure but got success"
            exit 1
          else
            echo "✅ Test passed: Action failed as expected with fail_on_error=true"
          fi

      # Case 2: Should complete with warning (fail_on_error: false)
      - name: Test Non-existent Source (without fail_on_error)
        id: test_no_fail
        uses: somaz94/compress-decompress@v1
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Behavior
        run: |
          if [ "${{ steps.test_no_fail.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed with warning as expected"
          else
            echo "❌ Test failed: Action failed when it should have completed with warning"
            exit 1
          fi

      # Additional test case for valid source but with warning
      - name: Create Test Directory with Warning Case
        run: |
          mkdir -p test_warning
          touch test_warning/.gitkeep

      - name: Test Valid Source with Warning
        id: test_warning
        uses: somaz94/compress-decompress@v1
        with:
          command: 'compress'
          source: './test_warning'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Case
        run: |
          if [ "${{ steps.test_warning.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed successfully with empty directory"
          else
            echo "❌ Test failed: Action failed with empty directory"
            exit 1
          fi

  test-github-workspace:
    name: Test GitHub Workspace Path
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          echo "Test content" > test.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/subdir.txt
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: GitHub Workspace with default settings
      - name: Test GitHub Workspace Path (Default)
        id: test_workspace_default
        uses: somaz94/compress-decompress@v1
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output'
          destfilename: 'workspace_default'
          verbose: 'true'

      # Case 2: GitHub Workspace with includeRoot false
      - name: Test GitHub Workspace Path (No Root)
        id: test_workspace_no_root
        uses: somaz94/compress-decompress@v1
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          includeRoot: 'false'
          dest: './output'
          destfilename: 'workspace_no_root'
          verbose: 'true'

      # Verify the results
      - name: Verify Compression Results
        run: |
          echo "Checking output directory contents:"
          ls -la ./output/
          
          # Test default case
          if [ -f "./output/workspace_default.zip" ]; then
            echo "✅ Default workspace compression successful"
            unzip -l ./output/workspace_default.zip
          else
            echo "❌ Default workspace compression failed"
            exit 1
          fi
          
          # Test no root case
          if [ -f "./output/workspace_no_root.zip" ]; then
            echo "✅ No root workspace compression successful"
            unzip -l ./output/workspace_no_root.zip
          else
            echo "❌ No root workspace compression failed"
            exit 1
          fi

      # Test decompression
      - name: Test Decompression (Default)
        uses: somaz94/compress-decompress@v1
        with:
          command: decompress
          source: ./output/workspace_default.zip
          format: zip
          dest: './extracted_default'
          verbose: 'true'

      - name: Test Decompression (No Root)
        uses: somaz94/compress-decompress@v1
        with:
          command: decompress
          source: ./output/workspace_no_root.zip
          format: zip
          dest: './extracted_no_root'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          echo "Checking extracted contents (Default):"
          ls -la ./extracted_default/
          
          echo "Checking extracted contents (No Root):"
          ls -la ./extracted_no_root/
          
          # Verify file contents for default case (with workspace directory)
          if [ -f "./extracted_default/workspace/test.txt" ] && [ -f "./extracted_default/workspace/subdir/subdir.txt" ]; then
            echo "✅ Default extraction verified"
          else
            echo "❌ Default extraction failed"
            exit 1
          fi
          
          # Verify file contents for no root case (files directly in directory)
          if [ -f "./extracted_no_root/test.txt" ] && [ -f "./extracted_no_root/subdir/subdir.txt" ]; then
            echo "✅ No root extraction verified"
          else
            echo "❌ No root extraction failed"
            exit 1
          fi

  test-github-workspace-paths:
    name: Test GitHub Workspace Path Variants
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          echo "Test content 1" > test1.txt
          echo "Test content 2" > test2.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/test3.txt
          
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: Direct github.workspace variable
      - name: Test Direct Workspace Path
        id: test_direct
        uses: somaz94/compress-decompress@v1
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output1'
          destfilename: 'direct_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Case 2: Workspace path with space
      - name: Test Workspace Path with Space
        id: test_with_space
        uses: somaz94/compress-decompress@v1
        with:
          command: compress
          source: ' ${{ github.workspace }}'
          format: zip
          dest: './output2'
          destfilename: 'space_workspace'
          verbose: 'true'
          includeRoot: 'false'

      # Verify both archives
      - name: Verify Compression Results
        run: |
          echo "Checking output directories contents:"
          ls -la ./output1/
          ls -la ./output2/
          
          # Test direct case
          if [ -f "./output1/direct_workspace.zip" ]; then
            echo "✅ Direct workspace compression successful"
            unzip -l ./output1/direct_workspace.zip
          else
            echo "❌ Direct workspace compression failed"
            exit 1
          fi
          
          # Test space case
          if [ -f "./output2/space_workspace.zip" ]; then
            echo "✅ Space workspace compression successful"
            unzip -l ./output2/space_workspace.zip
          else
            echo "❌ Space workspace compression failed"
            exit 1
          fi

      # Test decompression for both cases
      - name: Test Decompression (Direct)
        uses: somaz94/compress-decompress@v1
        with:
          command: decompress
          source: ./output1/direct_workspace.zip
          format: zip
          dest: './extracted_direct'
          verbose: 'true'

      - name: Test Decompression (Space)
        uses: somaz94/compress-decompress@v1
        with:
          command: decompress
          source: ./output2/space_workspace.zip
          format: zip
          dest: './extracted_space'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          echo "Checking extracted contents (Direct):"
          ls -la ./extracted_direct/
          
          echo "Checking extracted contents (Space):"
          ls -la ./extracted_space/
          
          # Verify file contents for both cases
          for dir in "./extracted_direct" "./extracted_space"; do
            if [ -f "$dir/test1.txt" ] && [ -f "$dir/test2.txt" ] && [ -f "$dir/subdir/test3.txt" ]; then
              echo "✅ Extraction verified for $dir"
              echo "Contents of test files:"
              cat "$dir/test1.txt"
              cat "$dir/test2.txt"
              cat "$dir/subdir/test3.txt"
            else
              echo "❌ Extraction failed for $dir"
              exit 1
            fi
          done