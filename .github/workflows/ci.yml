name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-compression-formats:
    name: Test Compression Formats
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [zip, tar, tgz, tbz2]
        include_root: [true, false]
        source: [test2]
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          mkdir -p test2 test3
          echo "Test content for test2" > test2/test2.txt

      - name: Test Compression
        id: compress
        uses: ./
        with:
          command: 'compress'
          source: './${{ matrix.source }}'
          format: ${{ matrix.format }}
          includeRoot: ${{ matrix.include_root }}
          verbose: 'true'

      - name: List Workspace Contents
        run: |
          echo "Current directory contents:"
          ls -la
          echo "Source directory contents:"
          ls -la ./${{ matrix.source }}

      # Set the correct source path based on includeRoot
      - name: Set Source Path
        id: set-path
        run: |
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo "source_path=./${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          else
            echo "source_path=./${{ matrix.source }}/${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          fi

      - name: Upload Compressed Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-${{ matrix.format }}-${{ matrix.source }}-root-${{ matrix.include_root }}
          path: ${{ steps.set-path.outputs.source_path }}
          if-no-files-found: error

      - name: Test Decompression
        uses: ./
        with:
          command: 'decompress'
          source: ${{ steps.set-path.outputs.source_path }}
          format: ${{ matrix.format }}
          dest: './unpacked-${{ matrix.format }}-${{ matrix.source }}'

      - name: Verify Contents
        run: |
          echo "Verifying ${{ matrix.format }} format with includeRoot: ${{ matrix.include_root }}"
          echo "Listing unpacked directory contents:"
          ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
          
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo "Contents with root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}/${{ matrix.source }}.txt
          else
            echo "Contents without root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}.txt
          fi

      - name: Print Compression Output
        run: |
          echo "Compression output for ${{ matrix.format }} (includeRoot: ${{ matrix.include_root }}): ${{ steps.compress.outputs.file_path }}"

  test-features-and-errors:
    name: Test Features and Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Case 1: Should fail (fail_on_error: true)
      - name: Test Non-existent Source (with fail_on_error)
        id: test_fail
        uses: ./
        continue-on-error: true  # Allow the workflow to continue even if this step fails
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify Expected Failure
        run: |
          if [ "${{ steps.test_fail.outcome }}" != "failure" ]; then
            echo "Expected failure but got success"
            exit 1
          else
            echo "✅ Test passed: Action failed as expected with fail_on_error=true"
          fi

      # Case 2: Should complete with warning (fail_on_error: false)
      - name: Test Non-existent Source (without fail_on_error)
        id: test_no_fail
        uses: ./
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Behavior
        run: |
          if [ "${{ steps.test_no_fail.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed with warning as expected"
          else
            echo "❌ Test failed: Action failed when it should have completed with warning"
            exit 1
          fi

      # Additional test case for valid source but with warning
      - name: Create Test Directory with Warning Case
        run: |
          mkdir -p test_warning
          touch test_warning/.gitkeep

      - name: Test Valid Source with Warning
        id: test_warning
        uses: ./
        with:
          command: 'compress'
          source: './test_warning'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Case
        run: |
          if [ "${{ steps.test_warning.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed successfully with empty directory"
          else
            echo "❌ Test failed: Action failed with empty directory"
            exit 1
          fi

      # Case 3: Test destination and filename options
      - name: Create Test Directory for Dest Options
        run: |
          # 테스트 디렉토리 및 파일 생성
          mkdir -p test_dest_options custom_output
          echo "Test content" > test_dest_options/test.txt
          
          # 디렉토리 생성 확인
          echo "Created directories and files:"
          ls -la test_dest_options/
          ls -la custom_output/

      - name: Test Custom Destination and Filename
        id: test_dest_options
        uses: ./
        with:
          command: 'compress'
          source: './test_dest_options'
          format: 'zip'
          dest: 'custom_output'
          destfilename: 'custom_archive'
          includeRoot: 'false'
          verbose: 'true'

      - name: Debug Output
        if: always()
        run: |
          echo "Action output:"
          echo "Status: ${{ steps.test_dest_options.outcome }}"
          echo "File path: ${{ steps.test_dest_options.outputs.file_path }}"
          
          echo "Directory structure:"
          tree .
          
          echo "Custom output directory contents:"
          ls -la ./custom_output/

      - name: Verify Custom Destination and Filename
        run: |
          if [ -f "./custom_output/custom_archive.zip" ]; then
            echo "✅ Test passed: Archive created with custom destination and filename"
            unzip -l ./custom_output/custom_archive.zip
          else
            echo "❌ Test failed: Custom destination/filename archive not created"
            echo "Current working directory: $(pwd)"
            echo "Contents of current directory:"
            ls -la
            echo "Contents of custom_output directory:"
            ls -la ./custom_output/
            exit 1
          fi

      - name: Test Decompression with Custom Path
        uses: ./
        with:
          command: 'decompress'
          source: './custom_output/custom_archive.zip'
          format: 'zip'
          dest: './unpacked_custom'

      - name: Verify Decompressed Contents
        run: |
          if [ -f "./unpacked_custom/test.txt" ]; then
            echo "✅ Test passed: Successfully decompressed custom path archive"
            cat "./unpacked_custom/test.txt"
          else
            echo "❌ Test failed: Decompression failed or file missing"
            exit 1
          fi