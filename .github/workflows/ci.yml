name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '.github/workflows/**'
      - '**/*.md'
      - 'backup/**'
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test-compression-formats:
    name: Test Compression Formats
    runs-on: ubuntu-latest
    strategy:
      matrix:
        format: [zip, tar, tgz, tbz2]
        include_root: [true, false]
        source: [test2]
        dest_config:
          - type: default
            dest: ''
            destfilename: ''
          - type: custom
            dest: 'custom_output'
            destfilename: 'custom_archive'
      fail-fast: false

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files and Directories
        run: |
          mkdir -p test2 test3 custom_output
          echo "Test content for test2" > test2/test2.txt
          
          echo "Created directories and files:"
          ls -la test2/
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            ls -la ${{ matrix.dest_config.dest }}/
          fi

      - name: Test Compression
        id: compress
        uses: ./
        with:
          command: 'compress'
          source: './${{ matrix.source }}'
          format: ${{ matrix.format }}
          includeRoot: ${{ matrix.include_root }}
          dest: ${{ matrix.dest_config.dest }}
          destfilename: ${{ matrix.dest_config.destfilename }}
          verbose: 'true'

      # Set the correct source path based on configuration
      - name: Set Source Path
        id: set-path
        run: |
          if [ "${{ matrix.dest_config.type }}" = "custom" ]; then
            echo "source_path=${{ matrix.dest_config.dest }}/${{ matrix.dest_config.destfilename }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
          else
            if [ "${{ matrix.include_root }}" = "true" ]; then
              echo "source_path=./${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            else
              echo "source_path=./${{ matrix.source }}/${{ matrix.source }}.${{ matrix.format }}" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Upload Compressed Artifact
        uses: actions/upload-artifact@v4
        with:
          name: compressed-${{ matrix.format }}-${{ matrix.source }}-root-${{ matrix.include_root }}-dest-${{ matrix.dest_config.type }}
          path: ${{ steps.set-path.outputs.source_path }}
          if-no-files-found: error

      - name: Test Decompression
        uses: ./
        with:
          command: 'decompress'
          source: ${{ steps.set-path.outputs.source_path }}
          format: ${{ matrix.format }}
          dest: './unpacked-${{ matrix.format }}-${{ matrix.source }}'

      - name: Verify Contents
        run: |
          echo "Verifying ${{ matrix.format }} format with includeRoot: ${{ matrix.include_root }}, dest: ${{ matrix.dest_config.type }}"
          echo "Listing unpacked directory contents:"
          ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
          
          if [ "${{ matrix.include_root }}" = "true" ]; then
            echo "Contents with root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}/${{ matrix.source }}.txt
          else
            echo "Contents without root directory:"
            ls -la ./unpacked-${{ matrix.format }}-${{ matrix.source }}
            cat ./unpacked-${{ matrix.format }}-${{ matrix.source }}/${{ matrix.source }}.txt
          fi

  test-features-and-errors:
    name: Test Features and Error Handling
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Case 1: Should fail (fail_on_error: true)
      - name: Test Non-existent Source (with fail_on_error)
        id: test_fail
        uses: ./
        continue-on-error: true  # Allow the workflow to continue even if this step fails
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'true'
          verbose: 'true'

      - name: Verify Expected Failure
        run: |
          if [ "${{ steps.test_fail.outcome }}" != "failure" ]; then
            echo "Expected failure but got success"
            exit 1
          else
            echo "✅ Test passed: Action failed as expected with fail_on_error=true"
          fi

      # Case 2: Should complete with warning (fail_on_error: false)
      - name: Test Non-existent Source (without fail_on_error)
        id: test_no_fail
        uses: ./
        with:
          command: 'compress'
          source: './nonexistent'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Behavior
        run: |
          if [ "${{ steps.test_no_fail.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed with warning as expected"
          else
            echo "❌ Test failed: Action failed when it should have completed with warning"
            exit 1
          fi

      # Additional test case for valid source but with warning
      - name: Create Test Directory with Warning Case
        run: |
          mkdir -p test_warning
          touch test_warning/.gitkeep

      - name: Test Valid Source with Warning
        id: test_warning
        uses: ./
        with:
          command: 'compress'
          source: './test_warning'
          format: 'zip'
          fail_on_error: 'false'
          verbose: 'true'

      - name: Verify Warning Case
        run: |
          if [ "${{ steps.test_warning.outcome }}" = "success" ]; then
            echo "✅ Test passed: Action completed successfully with empty directory"
          else
            echo "❌ Test failed: Action failed with empty directory"
            exit 1
          fi

      # # Case 3: Test destination and filename options
      # - name: Create Test Directory for Dest Options
      #   run: |
      #     # 테스트 디렉토리 및 파일 생성
      #     mkdir -p test_dest_options custom_output
      #     echo "Test content" > test_dest_options/test.txt
          
      #     # 디렉토리 생성 확인
      #     echo "Created directories and files:"
      #     ls -la test_dest_options/
      #     ls -la custom_output/

      # - name: Test Custom Destination and Filename
      #   id: test_dest_options
      #   uses: ./
      #   with:
      #     command: 'compress'
      #     source: './test_dest_options'
      #     format: 'zip'
      #     dest: 'custom_output'
      #     destfilename: 'custom_archive'
      #     includeRoot: 'false'
      #     verbose: 'true'

      # - name: Debug Output
      #   if: always()
      #   run: |
      #     echo "Action output:"
      #     echo "Status: ${{ steps.test_dest_options.outcome }}"
      #     echo "File path: ${{ steps.test_dest_options.outputs.file_path }}"
          
      #     echo "Directory structure:"
      #     tree .
          
      #     echo "Custom output directory contents:"
      #     ls -la ./custom_output/

      # - name: Verify Custom Destination and Filename
      #   run: |
      #     if [ -f "./custom_output/custom_archive.zip" ]; then
      #       echo "✅ Test passed: Archive created with custom destination and filename"
      #       unzip -l ./custom_output/custom_archive.zip
      #     else
      #       echo "❌ Test failed: Custom destination/filename archive not created"
      #       echo "Current working directory: $(pwd)"
      #       echo "Contents of current directory:"
      #       ls -la
      #       echo "Contents of custom_output directory:"
      #       ls -la ./custom_output/
      #       exit 1
      #     fi

      # - name: Test Decompression with Custom Path
      #   uses: ./
      #   with:
      #     command: 'decompress'
      #     source: './custom_output/custom_archive.zip'
      #     format: 'zip'
      #     dest: './unpacked_custom'

      # - name: Verify Decompressed Contents
      #   run: |
      #     if [ -f "./unpacked_custom/test.txt" ]; then
      #       echo "✅ Test passed: Successfully decompressed custom path archive"
      #       cat "./unpacked_custom/test.txt"
      #     else
      #       echo "❌ Test failed: Decompression failed or file missing"
      #       exit 1
      #     fi


      # # Case 4: Test custom destination and decompression
      # - name: Create Test Files for Decompression
      #   run: |
      #     mkdir -p source_files custom_output decompressed_output
      #     echo "Test content 1" > source_files/test1.txt
      #     echo "Test content 2" > source_files/test2.txt
          
      #     echo "Created test files:"
      #     ls -la source_files/

      # - name: Test Compression with Custom Path
      #   id: compress_test
      #   uses: ./
      #   with:
      #     command: 'compress'
      #     source: './source_files'
      #     format: 'zip'
      #     dest: './custom_output'
      #     destfilename: 'test_archive'
      #     includeRoot: 'false'
      #     verbose: 'true'

      # - name: Verify Compression Result
      #   run: |
      #     if [ -f "./custom_output/test_archive.zip" ]; then
      #       echo "✅ Test passed: Archive created at custom destination"
      #       unzip -l ./custom_output/test_archive.zip
      #     else
      #       echo "❌ Test failed: Archive not found at custom destination"
      #       echo "Contents of custom_output:"
      #       ls -la ./custom_output/
      #       exit 1
      #     fi

      # - name: Test Decompression with Custom Path
      #   id: decompress_test
      #   uses: ./
      #   with:
      #     command: 'decompress'
      #     source: './custom_output/test_archive.zip'
      #     format: 'zip'
      #     dest: './decompressed_output'
      #     verbose: 'true'

      # - name: Verify Decompression Result
      #   run: |
      #     if [ -f "./decompressed_output/test1.txt" ] && [ -f "./decompressed_output/test2.txt" ]; then
      #       echo "✅ Test passed: Files decompressed to custom destination"
      #       echo "Content verification:"
      #       cat "./decompressed_output/test1.txt"
      #       cat "./decompressed_output/test2.txt"
      #     else
      #       echo "❌ Test failed: Decompression verification failed"
      #       echo "Contents of decompressed_output:"
      #       ls -la ./decompressed_output/
      #       exit 1
      #     fi

  test-github-workspace:
    name: Test GitHub Workspace Path
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create Test Files
        run: |
          echo "Test content" > test.txt
          mkdir -p subdir
          echo "Subdir content" > subdir/subdir.txt
          echo "Created test files:"
          ls -la
          ls -la subdir/

      # Case 1: GitHub Workspace with default settings
      - name: Test GitHub Workspace Path (Default)
        id: test_workspace_default
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          dest: './output'
          destfilename: 'workspace_default'
          verbose: 'true'

      # Case 2: GitHub Workspace with includeRoot false
      - name: Test GitHub Workspace Path (No Root)
        id: test_workspace_no_root
        uses: ./
        with:
          command: compress
          source: ${{ github.workspace }}
          format: zip
          includeRoot: 'false'
          dest: './output'
          destfilename: 'workspace_no_root'
          verbose: 'true'

      # Verify the results
      - name: Verify Compression Results
        run: |
          echo "Checking output directory contents:"
          ls -la ./output/
          
          # Test default case
          if [ -f "./output/workspace_default.zip" ]; then
            echo "✅ Default workspace compression successful"
            unzip -l ./output/workspace_default.zip
          else
            echo "❌ Default workspace compression failed"
            exit 1
          fi
          
          # Test no root case
          if [ -f "./output/workspace_no_root.zip" ]; then
            echo "✅ No root workspace compression successful"
            unzip -l ./output/workspace_no_root.zip
          else
            echo "❌ No root workspace compression failed"
            exit 1
          fi

      # Test decompression
      - name: Test Decompression (Default)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_default.zip
          format: zip
          dest: './extracted_default'
          verbose: 'true'

      - name: Test Decompression (No Root)
        uses: ./
        with:
          command: decompress
          source: ./output/workspace_no_root.zip
          format: zip
          dest: './extracted_no_root'
          verbose: 'true'

      - name: Verify Decompression Results
        run: |
          echo "Checking extracted contents (Default):"
          ls -la ./extracted_default/
          
          echo "Checking extracted contents (No Root):"
          ls -la ./extracted_no_root/
          
          # Verify file contents for default case (with workspace directory)
          if [ -f "./extracted_default/workspace/test.txt" ] && [ -f "./extracted_default/workspace/subdir/subdir.txt" ]; then
            echo "✅ Default extraction verified"
          else
            echo "❌ Default extraction failed"
            exit 1
          fi
          
          # Verify file contents for no root case (files directly in directory)
          if [ -f "./extracted_no_root/test.txt" ] && [ -f "./extracted_no_root/subdir/subdir.txt" ]; then
            echo "✅ No root extraction verified"
          else
            echo "❌ No root extraction failed"
            exit 1
          fi