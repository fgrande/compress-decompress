name: Update Contributors

on:
  workflow_run:
    workflows: ["Generate changelog"]  # changelog-generator.yml의 name과 일치해야 함
    types:
      - completed
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  update-contributors:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT_TOKEN }}

      - name: Generate Contributors List
        run: |
          echo "# Contributors" > CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          echo "Thanks goes to these wonderful people:" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          
          # 임시 파일에 기여자 정보 저장
          declare -A contributors
          
          # 봇 계정 패턴 정의
          BOT_PATTERNS=(
            "bot"
            "Bot"
            "BOT"
            "actions"
            "github-actions"
            "dependabot"
            "renovate"
            "[bot]"
            "-bot"
            "github-actions[bot]"
            "dependabot[bot]"
            "renovate[bot]"
            "github-classroom[bot]"
            "allcontributors[bot]"
            "imgbot"
            "semantic-release-bot"
            "github-learning-lab"
            "stale[bot]"
          )

          # 봇 패턴을 grep 패턴으로 변환
          BOT_GREP_PATTERN=$(IFS="|"; echo "${BOT_PATTERNS[*]}")

          # 커밋 기여자 수집 (봇 제외)
          while read contributor; do
            name=$(echo "$contributor" | cut -d '<' -f1 | xargs)
            email=$(echo "$contributor" | grep -o '<[^>]*>' | tr -d '<>')
            
            # 이미 처리된 이메일인지 확인
            if [[ -z "${contributors[$email]}" ]]; then
              # GitHub API로 사용자 검색
              user_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                         "https://api.github.com/search/users?q=$email+in:email")
              
              username=$(echo "$user_info" | jq -r '.items[0].login // empty')
              
              # GitHub API로 이메일로 사용자를 찾지 못한 경우 커밋 메시지에서 추출한 정보 사용
              if [ -z "$username" ]; then
                # PR 작성자 정보로 재시도
                pr_author_info=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                               "https://api.github.com/search/users?q=$name")
                username=$(echo "$pr_author_info" | jq -r '.items[0].login // empty')
              fi

              if [ ! -z "$username" ] && ! [[ "$username" =~ ($BOT_GREP_PATTERN) ]]; then
                echo "- [@$username](https://github.com/$username)" >> CONTRIBUTORS.md
              elif [ ! -z "$name" ] && ! [[ "$name" =~ ($BOT_GREP_PATTERN) ]]; then
                # GitHub 사용자를 찾지 못한 경우 이름과 이메일 모두 표시
                echo "- $name ($email)" >> CONTRIBUTORS.md
              fi
              
              # 처리된 이메일 기록
              contributors[$email]="1"
            fi
          done < <(git log --format='%aN <%aE>' | \
                  grep -vE "$BOT_GREP_PATTERN" | \
                  sort -u)

          # 추가로 PR 작성자도 수집
          prs=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                "https://api.github.com/repos/${{ github.repository }}/pulls?state=all&per_page=100")
          
          echo "$prs" | jq -r '.[] | .user.login' | while read author; do
            if [[ ! -z "$author" ]] && [[ "$author" != "null" ]] && \
               ! [[ "$author" =~ ($BOT_GREP_PATTERN) ]]; then
              if ! grep -q "@$author" CONTRIBUTORS.md; then
                echo "- [@$author](https://github.com/$author)" >> CONTRIBUTORS.md
              fi
            fi
          done

          # PR 리뷰어/승인자 수집
          echo "" >> CONTRIBUTORS.md
          echo "## Reviewers" >> CONTRIBUTORS.md
          echo "" >> CONTRIBUTORS.md
          
          # PR 번호 추출
          pr_numbers=$(echo "$prs" | jq -r '.[].number')
          
          # 각 PR의 리뷰어 정보 수집
          for pr_number in $pr_numbers; do
            reviews=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                     "https://api.github.com/repos/${{ github.repository }}/pulls/$pr_number/reviews")
            
            echo "$reviews" | jq -r '.[] | select(.state == "APPROVED") | .user.login' | while read reviewer; do
              if [[ ! -z "$reviewer" ]] && [[ "$reviewer" != "null" ]] && \
                 ! [[ "$reviewer" =~ ($BOT_GREP_PATTERN) ]]; then
                if ! grep -q "@$reviewer" CONTRIBUTORS.md; then
                  echo "- [@$reviewer](https://github.com/$reviewer) (Reviewer)" >> CONTRIBUTORS.md
                fi
              fi
            done
          done

      - name: Create Pull Request
        uses: somaz94/go-git-commit-action@v1
        with:
          user_email: actions@github.com
          user_name: GitHub Actions
          create_pr: true
          auto_branch: true
          branch: main
          pr_branch: main
          pr_base: main
          pr_title: "docs: update contributors list"
          pr_labels: "documentation"
          pr_body: |
            ## Update Contributors List
            
            This PR automatically updates the contributors list.
            
            ### Changes
            - Updated CONTRIBUTORS.md with latest contributors
            - Added PR reviewers and approvers
            - Excluded bot accounts and automated systems
            - Added GitHub profile links where available
          github_token: ${{ secrets.PAT_TOKEN }}
          skip_if_empty: true
